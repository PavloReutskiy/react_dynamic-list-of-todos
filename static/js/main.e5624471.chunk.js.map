{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","onWindowOpen","isInfoWindowOpen","selectedInfoWindowId","className","map","todo","id","completed","title","titleStatusClass","classNames","buttonStatusClass","type","onClick","TodoFilter","onSortConditionChange","sortCondition","applyQuery","useState","query","setQuery","isResetButtonActive","setIsResetButtonActive","value","onChange","placeholder","event","target","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","response","ok","json","reject","Error","status","statusText","TodoModal","onWindowClose","user","setUser","isLoading","setIsLoading","errorMessage","setErrorMessage","useEffect","userId","userFromServer","catch","error","message","color","href","email","name","App","setTodos","setIsInfoWindowOpen","setSelectedInfoWindowId","setSortCondition","appliedQuery","setAppliedQuery","useCallback","debounce","handleSortConditionChange","handleWindowOpen","handleWindowClose","visibleTodos","useMemo","filter","toLowerCase","includes","trim","todosFromServer","openTodo","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5624471.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  onWindowOpen: (id: number) => void;\n  isInfoWindowOpen: boolean;\n  selectedInfoWindowId: number | null;\n}\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({\n    todos,\n    onWindowOpen,\n    isInfoWindowOpen,\n    selectedInfoWindowId,\n  }) => (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, completed, title } = todo;\n          const titleStatusClass = classNames({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          });\n\n          const buttonStatusClass = classNames('far', {\n            'fa-eye': !isInfoWindowOpen || id !== selectedInfoWindowId,\n            'fa-eye-slash': isInfoWindowOpen && id === selectedInfoWindowId,\n          });\n\n          return (\n            <tr key={todo.id} data-cy=\"todo\" className=\"\">\n              <td className=\"is-vcentered\">{id}</td>\n              {completed ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              ) : (\n                <td className=\"is-vcentered\" />\n              )}\n              <td className=\"is-vcentered is-expanded\">\n                <p className={titleStatusClass}>\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onWindowOpen(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={buttonStatusClass} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  ),\n);\n","import React, { useState } from 'react';\n\ninterface Props {\n  onSortConditionChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  sortCondition: string;\n  applyQuery: (value: string) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = React.memo(\n  ({\n    onSortConditionChange,\n    sortCondition,\n    applyQuery,\n  }) => {\n    const [query, setQuery] = useState('');\n    const [isResetButtonActive, setIsResetButtonActive] = useState(false);\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const { value } = event.target;\n\n      setQuery(value);\n      applyQuery(value);\n      setIsResetButtonActive(!!value);\n    };\n\n    const handleReset = () => {\n      setQuery('');\n      applyQuery('');\n      setIsResetButtonActive(false);\n    };\n\n    return (\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              value={sortCondition}\n              onChange={onSortConditionChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={query}\n            onChange={handleInputChange}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            {isResetButtonActive && (\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                aria-label=\"Clear search\"\n                onClick={handleReset}\n              />\n            )}\n          </span>\n        </p>\n      </form>\n    );\n  },\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject(new Error(`${response.status}: ${response.statusText}`))\n    ));\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  todo: Todo;\n  onWindowClose: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = React.memo(\n  ({ todo, onWindowClose }) => {\n    const [user, setUser] = useState<User>();\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n      getUser(todo.userId)\n        .then(userFromServer => {\n          setUser(userFromServer);\n          setIsLoading(false);\n        })\n        .catch(error => {\n          setErrorMessage(error.message);\n          setIsLoading(false);\n        });\n    }, []);\n\n    return (\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onWindowClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n                {' by '}\n\n                {errorMessage ? (\n                  <span style={{ color: 'red' }}>No user yet</span>\n                ) : (\n                  <a href={`mailto:${user?.email}`}>\n                    {user?.name}\n                  </a>\n                )}\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport debounce from 'lodash.debounce';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [isInfoWindowOpen, setIsInfoWindowOpen] = useState<boolean>(false);\n  const [selectedInfoWindowId, setSelectedInfoWindowId] = useState<number | null>(null);\n  const [sortCondition, setSortCondition] = useState('all');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const handleSortConditionChange = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSortCondition(event.target.value);\n  }, []);\n\n  const handleWindowOpen = useCallback((id: number) => {\n    setIsInfoWindowOpen(true);\n    setSelectedInfoWindowId(id);\n  }, []);\n\n  const handleWindowClose = useCallback(() => {\n    setIsInfoWindowOpen(false);\n  }, []);\n\n  const getVisibleTodos = () => {\n    let visibleTodos = [...todos];\n\n    if (sortCondition === 'active') {\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n    }\n\n    if (sortCondition === 'completed') {\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n    }\n\n    if (appliedQuery !== '') {\n      visibleTodos = visibleTodos.filter(todo => (\n        todo.title.toLowerCase().includes(appliedQuery.toLowerCase().trim())\n      ));\n    }\n\n    return visibleTodos;\n  };\n\n  const visibleTodos = useMemo(\n    getVisibleTodos,\n    [todos, appliedQuery, sortCondition],\n  );\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        setErrorMessage(error.message);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const openTodo = useMemo(() => {\n    return todos.find(todo => todo.id === selectedInfoWindowId);\n  }, [todos, selectedInfoWindowId]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSortConditionChange={handleSortConditionChange}\n                sortCondition={sortCondition}\n                applyQuery={applyQuery}\n              />\n            </div>\n\n            {isLoading && (\n              <div className=\"block\">\n                <Loader />\n              </div>\n            )}\n\n            {!isLoading && errorMessage && (\n              <p style={{ color: 'red' }}>Todo list is empty</p>\n            )}\n\n            {!isLoading && !errorMessage && (\n              <div className=\"block\">\n                <TodoList\n                  todos={visibleTodos}\n                  onWindowOpen={handleWindowOpen}\n                  isInfoWindowOpen={isInfoWindowOpen}\n                  selectedInfoWindowId={selectedInfoWindowId}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {isInfoWindowOpen && openTodo && (\n        <TodoModal\n          todo={openTodo}\n          onWindowClose={handleWindowClose}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}